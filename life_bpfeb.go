// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type lifeCellmap struct {
	Cells         [4096]int8
	Temp          [4096]int8
	Width         uint32
	Height        uint32
	LengthInBytes uint32
}

type lifeElem struct{ T struct{ _ [16]byte } }

// loadLife returns the embedded CollectionSpec for life.
func loadLife() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_LifeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load life: %w", err)
	}

	return spec, err
}

// loadLifeObjects loads life and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*lifeObjects
//	*lifePrograms
//	*lifeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLifeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLife()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// lifeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lifeSpecs struct {
	lifeProgramSpecs
	lifeMapSpecs
}

// lifeSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lifeProgramSpecs struct {
	BpfLife *ebpf.ProgramSpec `ebpf:"bpf_life"`
}

// lifeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lifeMapSpecs struct {
	Board          *ebpf.MapSpec `ebpf:"board"`
	LifeRingbuf    *ebpf.MapSpec `ebpf:"life_ringbuf"`
	LifeTimerArray *ebpf.MapSpec `ebpf:"life_timer_array"`
}

// lifeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLifeObjects or ebpf.CollectionSpec.LoadAndAssign.
type lifeObjects struct {
	lifePrograms
	lifeMaps
}

func (o *lifeObjects) Close() error {
	return _LifeClose(
		&o.lifePrograms,
		&o.lifeMaps,
	)
}

// lifeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLifeObjects or ebpf.CollectionSpec.LoadAndAssign.
type lifeMaps struct {
	Board          *ebpf.Map `ebpf:"board"`
	LifeRingbuf    *ebpf.Map `ebpf:"life_ringbuf"`
	LifeTimerArray *ebpf.Map `ebpf:"life_timer_array"`
}

func (m *lifeMaps) Close() error {
	return _LifeClose(
		m.Board,
		m.LifeRingbuf,
		m.LifeTimerArray,
	)
}

// lifePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLifeObjects or ebpf.CollectionSpec.LoadAndAssign.
type lifePrograms struct {
	BpfLife *ebpf.Program `ebpf:"bpf_life"`
}

func (p *lifePrograms) Close() error {
	return _LifeClose(
		p.BpfLife,
	)
}

func _LifeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed life_bpfeb.o
var _LifeBytes []byte
